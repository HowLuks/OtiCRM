/**
 * @fileoverview Firestore Security Rules for OtiCRM application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has a dedicated data tree under `/users/{userId}`,
 * and only the authenticated user can access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, including prospects, stages, and reports. This segregation ensures data privacy
 * and simplifies authorization logic.
 *
 * Key Security Decisions:
 * - User listing is implicitly disallowed by the path structure.
 * - The rules default to owner-only access unless explicitly stated otherwise.
 * - Data validation is relaxed during the prototyping phase, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * The 'prospects' documents under /users/{userId}/prospects/{prospectId} includes denormalized 'stageId' for authorization independence,
 * eliminating the need for potentially costly and slow `get()` calls to the stages collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for prospects, ensuring only the owner can read, create, update, or delete.
     * @path /users/{userId}/prospects/{prospectId}
     * @allow (create) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can create a prospect document with 'id' equal to 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @allow (get) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can read a prospect document they own.
     * @allow (list) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can list their own prospect documents.
     * @allow (update) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can update a prospect document they own.
     * @allow (delete) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can delete a prospect document they own.
     * @deny (create) - User 'OtherUserId' cannot create a prospect document under 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (get) - User 'OtherUserId' cannot read a prospect document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (update) - User 'OtherUserId' cannot update a prospect document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (delete) - User 'OtherUserId' cannot delete a prospect document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @principle Enforces document ownership for all operations on prospect documents.
     */
    match /users/{userId}/prospects/{prospectId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for stages, ensuring only the owner can read, create, update, or delete.
     * @path /users/{userId}/stages/{stageId}
     * @allow (create) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can create a stage document with 'id' equal to 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @allow (get) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can read a stage document they own.
     * @allow (list) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can list their own stage documents.
     * @allow (update) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can update a stage document they own.
     * @allow (delete) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can delete a stage document they own.
     * @deny (create) - User 'OtherUserId' cannot create a stage document under 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (get) - User 'OtherUserId' cannot read a stage document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (update) - User 'OtherUserId' cannot update a stage document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (delete) - User 'OtherUserId' cannot delete a stage document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @principle Enforces document ownership for all operations on stage documents.
     */
    match /users/{userId}/stages/{stageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for reports, ensuring only the owner can read, create, update, or delete.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can create a report document with 'id' equal to 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @allow (get) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can read a report document they own.
     * @allow (list) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can list their own report documents.
     * @allow (update) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can update a report document they own.
     * @allow (delete) - User 'BrWQUOWPoJZW6hzBRbzImSj1e3r2' can delete a report document they own.
     * @deny (create) - User 'OtherUserId' cannot create a report document under 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (get) - User 'OtherUserId' cannot read a report document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (update) - User 'OtherUserId' cannot update a report document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @deny (delete) - User 'OtherUserId' cannot delete a report document owned by 'BrWQUOWPoJZW6hzBRbzImSj1e3r2'.
     * @principle Enforces document ownership for all operations on report documents.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}