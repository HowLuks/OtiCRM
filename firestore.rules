/**
 * @fileoverview Firestore Security Rules for OtiCRM application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has their own private data tree rooted at `/users/{userId}`.
 * Only the authenticated user can access data within their own tree. Anonymous access is not permitted in these rules.
 *
 * Data Structure:
 * All data (prospects, stages, reports) is nested under /users/{userId}. This ensures clear ownership and prevents cross-user data access.
 *
 * Key Security Decisions:
 * - No user listing: Listing the `/users` collection is explicitly denied.
 * - Ownership: All writes require the authenticated user to be the owner of the target document.
 * - Denormalization for Authorization: No external lookups are performed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Requires authentication for all operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request's auth UID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces user-based ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner and the document exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that updates and deletes only happen on existing documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces that when creating a new document, the id matches the {prospectId} from the path.
     * @path N/A
     */
    function isValidNewProspect(userId) {
        return request.resource.data.id == userId;
    }


    /**
     * @description Security rules for the /users/{userId}/prospects/{prospectId} collection.
     * @path /users/{userId}/prospects/{prospectId}
     * @allow User 'user123' (create) can create a prospect under /users/user123/prospects/someProspectId if request.auth.uid == 'user123' and request.resource.data.id == 'someProspectId'.
     * @allow User 'user123' (get) can get a prospect under /users/user123/prospects/someProspectId if request.auth.uid == 'user123'.
     * @allow User 'user123' (list) can list prospects under /users/user123/prospects if request.auth.uid == 'user123'.
     * @allow User 'user123' (update) can update a prospect under /users/user123/prospects/someProspectId if request.auth.uid == 'user123' and the document exists.
     * @allow User 'user123' (delete) can delete a prospect under /users/user123/prospects/someProspectId if request.auth.uid == 'user123' and the document exists.
     * @deny User 'user456' (create) cannot create a prospect under /users/user123/prospects/someProspectId because they are not the owner.
     * @deny User 'user123' (create) cannot create a prospect under /users/user123/prospects/someProspectId if request.resource.data.id != 'someProspectId'.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree, validates relational integrity between documents.
     */
    match /users/{userId}/prospects/{prospectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && isValidNewProspect(prospectId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/stages/{stageId} collection.
     * @path /users/{userId}/stages/{stageId}
     * @allow User 'user123' (create) can create a stage under /users/user123/stages/someStageId if request.auth.uid == 'user123'.
     * @allow User 'user123' (get) can get a stage under /users/user123/stages/someStageId if request.auth.uid == 'user123'.
     * @allow User 'user123' (list) can list stages under /users/user123/stages if request.auth.uid == 'user123'.
     * @allow User 'user123' (update) can update a stage under /users/user123/stages/someStageId if request.auth.uid == 'user123' and the document exists.
     * @allow User 'user123' (delete) can delete a stage under /users/user123/stages/someStageId if request.auth.uid == 'user123' and the document exists.
     * @deny User 'user456' (create) cannot create a stage under /users/user123/stages/someStageId because they are not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/stages/{stageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for the /users/{userId}/reports/{reportId} collection.
     * @path /users/{userId}/reports/{reportId}
     * @allow User 'user123' (create) can create a report under /users/user123/reports/someReportId if request.auth.uid == 'user123'.
     * @allow User 'user123' (get) can get a report under /users/user123/reports/someReportId if request.auth.uid == 'user123'.
     * @allow User 'user123' (list) can list reports under /users/user123/reports if request.auth.uid == 'user123'.
     * @allow User 'user123' (update) can update a report under /users/user123/reports/someReportId if request.auth.uid == 'user123' and the document exists.
     * @allow User 'user123' (delete) can delete a report under /users/user123/reports/someReportId if request.auth.uid == 'user123' and the document exists.
     * @deny User 'user456' (create) cannot create a report under /users/user123/reports/someReportId because they are not the owner.
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}