/**
 * @file Firestore Security Rules for OtiCRM Application
 * @core_philosophy This ruleset enforces a strict user-ownership model, ensuring that each user can only access data explicitly associated with their user ID.
 * @data_structure All data is nested under /users/{userId}, creating a private data tree for each user.
 * @key_security_decisions User listing is disallowed. Data types are not strictly validated in this prototype, but relational integrity is enforced for ownership. Denormalization is used to improve performance and simplify rules.
 * @denormalization Prospects contain a denormalized `stageId` to avoid needing to `get` the Stage document for authorization.
 * @structural_segregation Data is segregated under the /users/{userId} collection to enforce user-level privacy.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Root-level access restrictions. No direct access to the root is allowed.
     * @path /
     * @allow (get) Always denied.
     * @deny (get) Any user attempting to read from the root.
     * @principle Root-level access is always denied for security.
     */
    match /{document=**} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the user is the owner of the document and the document exists
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for managing prospect data under a user's profile.
     * @path /users/{userId}/prospects/{prospectId}
     * @allow (create) A user creating a prospect with their own user ID.
     * @allow (get) A user reading a specific prospect they own.
     * @allow (list) A user listing all prospects they own.
     * @allow (update) A user updating a prospect they own.
     * @allow (delete) A user deleting a prospect they own.
     * @deny (create) A user attempting to create a prospect with a different user ID.
     * @deny (get) A user attempting to read a prospect owned by another user.
     * @deny (update) A user attempting to update a prospect owned by another user.
     * @deny (delete) A user attempting to delete a prospect owned by another user.
     * @principle Enforces document ownership for all operations. Validates userId on create. Requires the document exists on update and delete.
     */
    match /users/{userId}/prospects/{prospectId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == prospectId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for managing stages data under a user's profile.
     * @path /users/{userId}/stages/{stageId}
     * @allow (create) A user creating a stage with their own user ID.
     * @allow (get) A user reading a specific stage they own.
     * @allow (list) A user listing all stages they own.
     * @allow (update) A user updating a stage they own.
     * @allow (delete) A user deleting a stage they own.
     * @deny (create) A user attempting to create a stage with a different user ID.
     * @deny (get) A user attempting to read a stage owned by another user.
     * @deny (update) A user attempting to update a stage owned by another user.
     * @deny (delete) A user attempting to delete a stage owned by another user.
     * @principle Enforces document ownership for all operations. Validates userId on create. Requires the document exists on update and delete.
     */
    match /users/{userId}/stages/{stageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == stageId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Rules for managing report data under a user's profile.
     * @path /users/{userId}/reports/{reportId}
     * @allow (create) A user creating a report with their own user ID.
     * @allow (get) A user reading a specific report they own.
     * @allow (list) A user listing all reports they own.
     * @allow (update) A user updating a report they own.
     * @allow (delete) A user deleting a report they own.
     * @deny (create) A user attempting to create a report with a different user ID.
     * @deny (get) A user attempting to read a report owned by another user.
     * @deny (update) A user attempting to update a report owned by another user.
     * @deny (delete) A user attempting to delete a report owned by another user.
     * @principle Enforces document ownership for all operations. Validates userId on create. Requires the document exists on update and delete.
     */
    match /users/{userId}/reports/{reportId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == reportId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }
  }
}